---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{.Chart.Name}}-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
      - zloi.space
    secretName: zloi.space-certificate
  rules:
    - host: zloi.space
      http:
        paths:
          - path: /restaurant/
            pathType: Prefix
            backend:
              service:
                name: {{.Chart.Name}}-service
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: {{.Chart.Name}}-service
spec:
  selector:
    app: {{.Chart.Name}}
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Chart.Name}}-deployment
  labels:
    app: {{.Chart.Name}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{.Chart.Name}}
  template:
    metadata:
      labels:
        app: {{.Chart.Name}}
    spec:
      containers:
        - name: app
          image: "{{.Values.app.repository}}/{{.Values.app.name}}:{{.Values.app.tag}}"
          envFrom:
          - secretRef:
              name: env-secret
          env:
          - name: CACHE_HOST
            value: localhost
          - name: DB_HOST
            value: {{.Chart.Name}}-mysql-service
          - name: STORAGE_HOST
            value: {{.Chart.Name}}-minio-service
          ports:
          - containerPort: 3000
        - name: redis
          image: {{.Values.redis.image}}
          ports:
          - containerPort: 6379
      imagePullSecrets:
        - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: {{.Chart.Name}}-mysql-service
spec:
  selector:
    app: {{.Chart.Name}}-mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Chart.Name}}-mysql
spec:
  selector:
    matchLabels:
      app: {{.Chart.Name}}-mysql
  serviceName: {{.Chart.Name}}-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: {{.Chart.Name}}-mysql
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: mysql
        image: {{.Values.mysql.image}}
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: env-secret
              key: DB_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: env-secret
              key: DB_NAME
        args: ["--default-authentication-plugin=mysql_native_password"]
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: {{.Chart.Name}}-mysql-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: {{.Chart.Name}}-mysql-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{.Values.mysql.memory}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{.Chart.Name}}-minio-service
spec:
  selector:
    app: {{.Chart.Name}}-minio
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Chart.Name}}-minio
spec:
  selector:
    matchLabels:
      app: {{.Chart.Name}}-minio
  serviceName: {{.Chart.Name}}-minio
  replicas: 1
  template:
    metadata:
      labels:
        app: {{.Chart.Name}}-minio
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: minio
        image: {{.Values.storage.image}}
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: env-secret
              key: STORAGE_USER
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: env-secret
              key: STORAGE_PASSWORD
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: {{.Chart.Name}}-minio-storage
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: {{.Chart.Name}}-minio-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{.Values.storage.memory}}